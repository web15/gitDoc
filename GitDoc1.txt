git log	prints every commit that has ever been made starting with the most recent. Each commit has an ID, author, date, and a message associated with it 
      (press down arrow to move through list)
git log -stat	gives statistics regarding which files were affected during a commit used to compare two versions of a file ( +++++++ 'insertions' ; ---------- 'deletions' )
      > run $ 'git config  --global color.ui auto' < to enable color
git diff	(enter>git diff >copy & paste first ID then second ID>enter>shows the changes made to the two commits, red lines were removed, green lines were added)
q 	press at any time to quit current output (q)
git --version	use to see which version, if any, is installed on computer
git clone 	to clone a repository, run git clone followed by a space and the repository URL
cd	current directory, use to see where you are or to enter into a directory i.e. $ 'cd asteroids' would put you in the 'asteroids' directory
	add a project folder with cd  
$ cd simple-git-demo
git init
"The git init command adds a local Git repository
 to the project"
mkdir version-control   > makes a new folder
cd version-control   > enters the new folder
git clone (url'asteroids')    >clones asteroids/ into new folder

cd asteroids/   > enter into 'asteroids'
cd ~   > back to start 'home directory'
cd version-control   > back into version-control folder
ls   list contents of directory or folder
ls -a	list contents of directory or folder but also includes hidden files which begin with (.) i.e. >   .git
git init	used to initialize (make) a new empty Git repository, use from within the folder you want to be tracked by Git
git status	used to show which files have changed

git add	    add file to staging area

git commit -m   adds file to repository>includes commit message<

git checkout master		resolves detached ‘HEAD’

git checkout “branchName” 	allows you to work on branch

git merge		use to add branch to master

git commit --amend -m 	 “New commit message” use to change commit message

git log --graph --oneline master coins >shows easy to follow changes between work on a branch and work on the master<

>Setting up your workspace<
Download files from instructions >  https://classroom.udacity.com/courses/ud775/lessons/2980038599/concepts/33417185870923
Then move them to current directory using git-bash terminal
mv Downloads/git-completion.bash.txt git-completion.bash

mv Downloads/git-prompt.sh git-prompt.sh

mv Downloads/bash_profile_course .bash_profile

> Close and reopen git-bash to effect changes<

To choose a default editor for commit messages

$ git config --global core.editor ��C:\Program\ Files\Sublime\ Text\ 2\sublime_text.exe� -n -w�

>To cause Sublime to launch from within git bash<
$ mv .bash_profile bash_profile  (only use if file is hidden)

>Open .bash profile with editor and add

alias sub1=�C:/Program\ Files/Sublime\ Text\ 2/sublime_text.exe�


add two more git config commands

$ git config --global push.default upstream

$ git config --global merge.conflictstyle diff3





>more commands<

git checkout  >to access old versions of files












NOTES:

Compare two commits, printing each line that is present in one commit but not the other.

git diff will do this. It takes two arguments - the two commit ids to compare.

Make a copy of an entire Git repository, including the history, onto your own computer.

git clone will do this. It takes one argument - the url of the repository to copy.

Temporarily reset all files in a directory to their state at the time of a specific commit.

git checkout will do this. It takes one argument - the commit ID to restore.

Show the commits made in this repository, starting with the most recent.

git log will do this. It doesn't take any arguments.

Behavior of git checkout
Checking out an earlier commit will change the state of at least one file.

This is sometimes true. Git doesn't allow you to save a new commit if no files have been updated, so you might think this is always true. However, it's possible to do the following:

Save a commit (call this commit 1).
Update some files and save another commit (call this commit 2).
Change all the files back to their state during commit 1, then save again (call this commit 3).
This sometimes happens if commit 2 contained a bug, and it's important to fix the bug quickly. The easiest thing to do might be to remove all the changes introduced by commit 2 to fix the bug, then figure out how to safely reintroduce the changes later.

At this point, commit 3 is the latest commit, so if you checkout commit 1, none of the files will be changed. 


Checking out an earlier commit will change the state of more than one file.

Checking out an earlier commit will change the state of every file in the repository.

Both of these are sometimes true. Since each commit tracks the state of all files in the repository, it is possible that checking out an earlier commit will change the state of multiple files, or even all the files in the repository. However, it is possible to save a new commit after changing only one file, so it is possible only one file will change. 


After checking out a commit, the state of all the files in the repository will be from the same point in time.

This is always true. A commit saves a snapshot of all files in the repository at the time the commit was made, so checking out an earlier commit will result in all the files being reverted to their state at the time the commit was made. That is, the files will be in a consistent state.


